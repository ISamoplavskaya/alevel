БАЗИ ДАНИХ SQL

Бази даних SQL використовують мову структурованих запитів визначення даних і управління ними.
SQL - один з найбільш універсальних і широко використовуваних варіантів, який особливо добре
підходить для складних запитів та гарантує безпеку. Однак він може мати обмежувальний характер,
оскільки вимагає, щоб використовували зумовлені схеми визначення структури даних перед роботою
з ними. Всі дані повинні мати однакову структуру, що може вимагати чимало зусиль у процесі попередньої
підготовки і будь-яка зміна структури буде складною та руйнівною для всієї системи.

ПЕРЕВАГИ SQL:

- Структурованість: Дані організовані у вигляді таблиць, що полегшує взаємодію та обробку даних.
- ACID-властивості: Гарантує надійність та консистентність даних завдяки властивостям ACID (Atomicity,
Consistency, Isolation, Durability).

НЕДОЛІКИ SQL:

- Масштабованість: Складно масштабувати горизонтально при великому обсязі даних. Найчастіше бази даних
SQL масштабуються по вертикалі, що означає, що можна збільшити навантаження один сервер, збільшивши такі
параметри, як ЦП, ОЗУ чи SSD.
- Гнучкість: Не так гнучкий щодо змін у схемі даних.

БАЗИ ДАНИХ NoSQL

Бази даних NoSQL, навпаки, мають динамічні схеми неструктурованих даних. Дані зберігаються різними
способами: вони можуть бути орієнтовані на стовпці, орієнтовані на документи, засновані на графах
або організовані як сховище KeyValue.

ПЕРЕВАГИ NoSQL:

- Гнучкість:
  - Можна створювати документи без попереднього визначення їхньої структури
  - Кожен документ може мати свою унікальну структуру
  - Синтаксис може змінюватись від бази даних до бази даних
  - Можна в будь-який момент додавати нові поля
- Масштабованість: Легко масштабується горизонтально для роботи з великим обсягом даних.

НЕДОЛІКИ NoSQL:

- Відсутність ACID: Може виникнути втрата даних в разі непередбачуваних ситуацій.
- Складність запитів: Деякі операції можуть бути менш ефективними порівняно з SQL.


ПРИКЛАДИ ЗАСТОСУВАННЯ

SQL (Structured Query Language):
1. Операційні бази даних (OLTP - Online Transaction Processing):
   - Приклад: Банківська система для обробки транзакцій клієнтів, де важливо забезпечити
   консистентність та точність даних під час багатоопераційного використання.

2. Системи управління реляційними базами даних (RDBMS):
   - Приклад: Великі корпоративні системи, де потрібно зберігати та організовувати великі
   обсяги даних у зв'язаних таблицях.

3. Звітні системи та аналітика (OLAP - Online Analytical Processing):
   - Приклад: Система збору та аналізу даних для прийняття стратегічних рішень, де частіше
   проводяться операції з читання, а не запису.

NoSQL (Not Only SQL):
1. Big Data та обробка потокових даних:
   - Приклад: Система обробки потокових даних, де потрібно швидко зберігати та аналізувати великі
   потоки даних (наприклад, Apache Kafka, MongoDB).

2. Інтернет-проекти та соціальні мережі:
   - Приклад: Система кешування для соціальної мережі, де швидкий доступ до данних користувачів
   важливіший за строгу консистентність (наприклад, Redis, Cassandra).

3. Неструктуровані дані та гнучкі схеми:
   - Приклад: Проекти, де структура даних може змінюватися в процесі розвитку, ідеально для зберігання
   неструктурованої інформації (наприклад, MongoDB, CouchDB).

4. Географічно-розподілені системи:
   - Приклад: Системи, які розподілені географічно та використовують реплікацію для підтримки доступу
   з різних регіонів (наприклад, Amazon DynamoDB, Couchbase).



